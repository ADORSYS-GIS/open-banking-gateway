openapi: 3.0.1
info:
  title: Open Banking Gateway - Consent Authorization API.  
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
  description: |
    ### Description
    Interface used by the PsuUserAgent to present consent authorization services to the PSU. The consent authorization process is triggered by redirecting the PSU from
    the [TppBankingApi](https://adorsys.github.io/open-banking-gateway/doc/latest/architecture/dictionary#TppBankingApi) (2<sub>a</sub>)
    over the [FinTechApi](https://adorsys.github.io/open-banking-gateway/doc/latest/architecture/dictionary#FinTechApi) (2<sub>b</sub>)
    to the /consent/auth entry point of this [ConsentAuthorisationApi](https://adorsys.github.io/open-banking-gateway/doc/latest/architecture/dictionary#ConsentAuthorisationApi) (2<sub>c</sub>).
    The decision on whether the authorization process is embedded or redirected is taken by this ConsentAuthorisationApi.
    
    The following picture displays the overall architecture of this banking gateway: 
    
    ![High level architecture](/img/open-banking-consent-authorisation-api.png)
    
    
    #### Redirecting to the ConsentAuthorisationApi (2<sub>a</sub>)
    Any service request of the FinTechUI to the FinTechApi (1<sub>a</sub>) will be forwarded to the TppBankingApi (1<sub>b</sub>).
    This forward might contain a [PsuConsentSession](https://adorsys.github.io/open-banking-gateway/doc/latest/architecture/dictionary#PsuConsentSession)
    that is used to identify the PSU in the world of the TPP.
    
    ##### Decision to Redirect
    The TppBankingApi uses the provided PsuConsentSession to retrieve an eventualy suitable consent that will be used to forward the corresponding service request to the OpenBankingApi (1<sub>c</sub>) of the ASPSP.
    If there is no suitable consent, the TPP might still send a consent initiation request to the OpenBankingApi (1<sub>c</sub>). Whether this request is sent or not
    depends on the design of the target OpenBankingApi. Finally, the TppBankingApi will if necessary instruct the FinTechApi (2<sub>a</sub>) to redirect the PsuUgerAgent (2<sub>b</sub>) to the /consent/auth entry point of 
    the ConsentAuthorisationApi (2<sub>c</sub>).
    
    ##### User Agen Type
    This Api assumes that the PsuUserAgent is a modern browsers that :
    * Automatically detects the 302 Found response code and processes the temporarily redirection action automatically.
    * Stores httpOnly cookies sent with the redirect under the given domain and path.
    
    This Api also assumes any other PsuUserAgent like a native mobile or a desktop application can simulate this same behavior upon receiving 302 response code. 
    
    ##### Protecting the Redirect
    A FinTechRedirectSession describes the process of sending the PsuUserAgent from the FinTechApi to the ConsentAuthorisationApi. The only valuable tiket
    held by the bearer of a redirect link (location-url) is the location url. In order not to transport too many data in the redirect url,
    data associated with a redirect will be stored in a [RedirectSession](https://adorsys.github.io/open-banking-gateway/doc/latest/architecture/dictionary#RedirectSession)
    on the TppServer. A FinTechRedirectSession is then solelly protected by the redirectCode that is generated while storing redirect data and
    added as a query parameter to the redirect url. 
    
    ###### The redirectCode
    The redirectCode has following properties :
    * The redirectCode is a one time string that contains information used to retrieve RedirectSession on the TppServer.
    * The code is short lived (e.g 5 seconds) an will be rejected by the TppServer if expired.
    * The record indexed by the redirectCode (RedirectSession) will also be deleted by the TppServer on first retrieval by the ConsentAuthorisationApi.
    * The bearer of a redirect code can not be trusted, as the redirect call can be intercepted and misused.
    * For now we assume the bearer of a redirectCode is untrusted.
    
    ###### FinTech Identity vs. Banking Identity
    As the consent provided by the PSU on the TPP or Banking interface is associated wiht the Banking-Identity of the PSU, there is no garanty whatsoever, that
    that the PSU providing his consent on the ConsentAuthorisationApi or on the OnlineBankingApi of the ASPSP is the same ast he one identified with the FinTechApi. 
    By consequence, a PSU can be mielead into providing a consent that is used by an untended user.

    In order to garanty uniqueness, both identities have to somehow be connected. There are many ways of making sure the PSU providing a consent
    is the same as the one interacting with the FinTech :
    * The usage of a common identity provider can provide a way to establish a relationship between both FinTechPSU and BankingPSU.
    * The binding of the authorisation process to the UserAgent can make sure the FinTech that starts the authorization process is the one 
    that completes it.
    
    ###### Common Identity Provider
    Assuming the FinTechApi relies on the same identity provider like the ConsentAuthorisationApi to identify the PSU, an identification of the PSU by the 
    ConsentAuthorisationApi prior to processing the consent authorization will garanty the identity of both FinTechPSU and BankingPSU. 
    
    As the common identity is known to the TPP (e.g. : sub claim), there is even no need to back redirect the PsuUserAgent to the FinTechApi after consent authorization is completed.
    
    ###### Binding Consent Authorization to UserAgent
    The FinTechRedirectSessionCookie is a cookie generated by the FinTechApi and added to the RedirectResponse sent back to PsuUserAgent. This cookie is held
    by the PsuUserAgent and returned the FinTechApi when the PsuUserAgent is sent back to the FinTechApi upon completion of the consent authorization process.
    
    The FinTechRedirectSessionCookie has following properties :
    * The FinTechRedirectSessionCookie is bound to a single redirect process and the cookie path ist extended with the redirect-id.
    * The redirect-id in the cookie path and in the okUrl/nokUrl helps restrict unnecessary transmission of this cookie to the FinTechServer.
    * The lifespan of the FinTechRedirectSessionCookie is equal to the intended max duration of the started authorization session. So if the TPP 
    expect the consent authorization to be completed after 2 hours, the duration of this cookie shall be set to 2 hours. See the 
    endpoint /v1/{redirect-id}/fromConsentOk/{redirectSessionState} of the sample FinTechApi.
    * The redirectSessionState will be added to the okUrl/nokUrl of the FinTechApi and used to authenticate the FinTechRedirectSessionCookie as
    XSRF-Protection measure.
    
    Using the FinTechRedirectSessionCookie on the way back to the FinTechApi to identify the redirect session, reauthenticating the FinTechPsu will be sufficent to assume identity
    between the FinTechPSU and the BankingPSU.
    
    #### Request processing by the ConsentAuthorisationApi
    At the entry point (/consent/auth), the ConsentAuthorisationApi will use the redirectCode to retrieve the RedirectSession from the TppServer.
    An analysis of the RedirectSession will help decide if the ConsentAuthorisationApi will proceed with an embedded approach (E<sub>1</sub>) or a redirect approach (R<sub>1</sub>).
    
    ##### Using auth-id for isolating consent authorisation processes from each order
    In order to make sure that a consent request can not be used for the wrong purpose, and in order to allow a PSU
    to start many parallel authorization processes, it is essential to be able to distinguish between different
    consent authorization processes started by the same PSU. For this reason, we introduce the notion of auth-id.
    
    The auth-id will be used as a path parameter to group all requests associated with the same consent authorisation process.  
    
    ##### ConsentAuthSessionCookie and consentAuthState
    Each authorisation session started will be associated with a proper ConsentAuthSessionCookie and a corresponding consentAuthState.
    * The ConsentAuthorisationApi will generated a ConsentAuthSessionCookie and associate it with the first 
    response to the PsuUserAgent (E<sub>1</sub>, R<sub>1</sub>). 
    * The ConsentAuthorisationApi will also generate an consentAuthState that will be used to authenticate 
    usage of the ConsentAuthSessionCookie. This is, all relevant requests to the ConsentAuthorisationApi will be expected to
    contain the consentAuthState in the Authorization header parameter and also bring the ConsentAuthSessionCookie for authentication.
    * All subsequent request to the ConsentAuthorisationApi must specify the consentAuthState. This is generally the case of the embedded approach that 
    uses the generic endpoint /consent/embedded/auth to pass PSU credentialsto the ConsentAuthorisationApi.
    
    ##### The generic AuthorizeResponse
    All responses sent by the ConsentAuthorisationApi to the UI are derived from the AuthorizeResponse object. 
    This object presents :
    * The consentAuthState as a XSRF parameter used to reauthenticate the ConsentAuthSessionCookie. It can also be used if required
    to encrypt information stored in the corresponding ConsentAuthSessionCookie.
    * The AuthorizeResponse object info also contains information used to display a qualified page to the PSU 
    prio to eventually redirecting the PSU to the target ASPSP.
    * Any session, account or payment information needed to manage the authorization process is stored in both AuthorizeResponse and encrypted in the ConsentAuthSessionCookie.
    * The ConsentAuthSessionCookie is secure and httpOnly.
    
    #### Redirecting PSU to the ASPSP (R<sub>1</sub>)
    In a redirect approach, the The retruned AuthorizeResponse object contains information needed
    to present a suitable redirect info page to the PSU. Redirection can either be actively performed by the UIApplication
    or performed as a result of a 30x redirect response to the PsuUserAgent. In any case, the redirection to the OnlineBanking
    interface of the ASPSP must consider following security details.
    
    ##### Setting a TppConsentSessionCookie
    The redirect response to the PsuUserAgent must set a TppConsentSessionCookie.
    * This cookie contains information associated with this specific redirect session.
    * This cookie can be used togehther with a corresponding consentAuthState to identify the BankingPSU at the ConsentAuthorisationApi.
    * This cookie must have a life time equal to the expected duration of the corresponding redirect session at the target ASPSP OnlineBankingApi.
    
    ##### Desiging the BackRedirectURL (R<sub>6</sub>)
    The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent
    back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the
    ASPSP OpenBankingApi, the BackRedirectURL must contains atleast :
    * A redirect-id (as a path parameter) used to isolate many redirect processes form each order.
    * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter.
    * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.
    
    #### Back-Redirecting PSU to the FinTechApi (4<sub>b</sub>)
    Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well.
    * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi.
    * After verifying the FinTechRedirectSessionCookie (4<sub>b</sub>), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4<sub>c</sub>). 
    * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process.
    
    #### Final Result of the Authorization Process
    The final result of the authorization process is a PsuCosentSession that is returned by the token endpoint of the TppBankingAPi to
    the FinTechApi (4<sub>c</sub>). This handle will (PsuCosentSession) will be stored by the FinTechApi and added a PSU identifying information to
    each service request associated with this PSU. 
tags:
- name: Consent Authorization
  description: |
    Entry point for processing a consent request redirected by the TppBankingApi
    over the FinTechApi to this ConsentAuthorisationApi.
paths:
  /consent/auth:
    get:
      operationId: authEntryPointUsingGET
      summary: |
        Entry point for processing a consent request redirected by the TppBankingApi
        over the FinTechApi to this ConsentAuthorisationApi.
      tags:
      - Consent Authorization
      description: |
        This is the <b>entry point</b> for processing a consent redirected
        by the TppBankingApi to this ConsentAuthorisationApi.
      parameters:
      - name: redirectCode
        in: query
        description: redirectCode
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_AuthorizeResponse'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 

  /consent/{auth-id}/embedded/auth:
    post:
      tags:
      - Consent Authorization
      summary: Generic challenge response end point for updating consent session with
        PSU authentication data while requesting remaining challenges for the ongoing
        authorization process.
      description: |
        Update consent session with PSU auth data whereby requesting remaining
        challenges for the ongoing authorization process. 
        * Request contains the PsuAuthRequest constaining necessary consent information.
        * Request Returns the AuthorizeResponse constaining necessary consent information.
      operationId: embeddedAuthUsingPOST
      parameters:
        #path
        - $ref: "#/components/parameters/auth-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PsuAuthRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200_AuthorizeResponse'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 
      security:
      - cookieAuth: []
      - authState: []

  /consent/{auth-id}/from/aspsp/{tppConsentSessionState}/nok:
    get:
      tags:
      - Consent Authorization
      summary: Redirecting back from ASPSP to TPP after a failed consent authorization.
      description: Redirecting back from ASPSP to TPP after a failed consent authorization.
        In any case, the session of the user will be closed and cookies will be deleted
        with the response to this request.
        * Request contains
          * tppConsentSessionState retrieved from the response of the peceeding request.
          * Instructions on how to proceed with the next request is included in the ConsentAuthSessionCookie.
        * Request Returns
          * 302 Redirect
          * Redirect Location Header to FinTechApi.
          * Null ConsentAuthSessionCookie (deletion).
      operationId: fromAspspNokUsingGET
      parameters:
        #path
        - $ref: "#/components/parameters/auth-id"
        - $ref: "#/components/parameters/tppConsentSessionState"
      responses:
        '200':
          $ref: '#/components/responses/200_AuthorizeResponse'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 
      security:
      - tppConsentSessionCookie: []

  /consent/{auth-id}/from/aspsp/{tppConsentSessionState}/ok:
    get:
      tags:
      - Consent Authorization
      summary: Redirecting back from ASPSP to ConsentAuthorisationApi after a successful
        consent authorization.
      description: |
        Redirecting back from ASPSP to ConsentAuthorisationApi after a
        successful consent authorization. In any case, the consent session of the
        user will be closed and cookies will be deleted with the response to this
        request.
        * Request contains
          * ConsentSessionState included in the link sent to the ASPSP in the consent initiation.
          * Instructions on how to proceed with the next request is included in the ConsentAuthSessionCookie.
        * Request Returns
          * 302 Redirect
          * Redirect Location Header to FinTechApi.
          * Null ConsentAuthSessionCookie (deletion).
      operationId: fromAspspOkUsingGET
      parameters:
        #path
        - $ref: "#/components/parameters/auth-id"
        - $ref: "#/components/parameters/tppConsentSessionState"
      responses:
        '200':
          $ref: '#/components/responses/200_AuthorizeResponse'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 
      security:
      - tppConsentSessionCookie: []

  /consent/{auth-id}/to/aspsp/deny:
    post:
      tags:
      - Consent Authorization
      summary: Closes this session and redirects the PSU back to the FinTechApi or
        close the application window.
      description: |
        Closes this session and redirects the PSU back to the FinTechApi
        or close the application window. In any case, the session of the user will
        be closed and cookies will be deleted with the response to this request.
        * Request contains
          * consentSessionState is retrieved from the AuthorizeResponse of the peceeding request.
          * ConsentAuthSessionCookie.
        * Request Returns
          * 302 Redirect
          * Redirect Location Header to tpp.
          * Null ConsentAuthSessionCookie (deletion).
      operationId: denyRedirectUsingPOST
      parameters:
        #path
        - $ref: "#/components/parameters/auth-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DenyRedirectRequest'
        required: true
      responses:
        '302':
          $ref: '#/components/responses/302_Redirect_to_FinTechApi'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 
      security:
      - cookieAuth: []
      - authState: []

  /consent/{auth-id}/to/aspsp/grant:
    post:
      tags:
      - Consent Authorization
      summary: Provides the ConsentAuthorisationApi with the opportunity to redirect
        the PSU to the ASPSP.
      description: |
        Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP.
      operationId: grantRedirectUsingPOST
      parameters:
        #path
        - $ref: "#/components/parameters/auth-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeRequest'
        required: true
      responses:
        '302':
          $ref: '#/components/responses/302_Redirect_to_ASPSP'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden' 
        '404':
          $ref: '#/components/responses/404_NotFound' 
      security:
      - cookieAuth: []
      - authState: []

components:
  responses:
    200_AuthorizeResponse:
      headers:
        X-Request-ID:
          $ref: '#/components/headers/X-Request-ID'
        Set-Cookie:
          $ref: '#/components/headers/Set-Cookie'
      content:
        application/json:
          schema:
            type: object
            properties:
              authorizeResponse:
                $ref: '#/components/schemas/AuthorizeResponse'

    302_Redirect_to_ASPSP:
      description: Redirects UserAgent to the ASPSP online banking interface.
      headers:
        Location:
          $ref: '#/components/headers/Location-ASPSP'
        X-Request-ID:
          $ref: '#/components/headers/X-Request-ID'
        Set-Cookie:
          $ref: '#/components/headers/Set-TppConsentSessionCookie'
          description: |
            Here the cookie set ic called a TppConsentSessionCookie. Looks like
            TCSC_{auth-id}=ejts.adsfa.adfaj; Path=/consent/{auth-id}/from/aspsp. In the case XYZ is an
            identifier used to keep track of different TCSCs. As a user can initiate more than one sca from one browser instance. 
            * Note that the path of the TCSC is Path=/consent/{auth-id}/from/aspsp where auth-id is 
            a local id like xyz. So TCSC_xyz are only sent to the server when a callback link
              commes from the ASPSP.
            * Also note that the callback link hast the structure /consent/{auth-id}/from/aspsp/{tppConsentSessionState}/ok where the
              auth-id is a simple random string (xyz) and the tppConsentSessionState the key to validate the TppConsentSessionCookie.
            * The way the callback link is passed to the ASPSP is dependent on the OpenBankingApi of the ASPSP.
            * The TppConsentSessionCookie has an expiration date after which no callback will be accepted from the OpenBankingApi.
    302_Redirect_to_FinTechApi:
      description: Redirects UserAgent back to the FinTechAPI.
      headers:
        Location:
          $ref: '#/components/headers/Location-FinTechApi'
        X-Request-ID:
          $ref: '#/components/headers/X-Request-ID'
        Set-Cookie:
          $ref: '#/components/headers/Reset-ConsentAuthSessionCookie'
    401_Unauthorized:
      description: |
        Access credentials absent or invalid. This happens when
        * Provided credential for login not matching.
        * Endpoin expect a session cookie but none is present.
        * Session cookie is present but associated stateString does not match.
        
        As a consequence, we reset existing FinTechLoginSessionState if any. 
        Nevertheless we do not reset RedirectSessionCookie.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
      content:
        application/json:
          schema:
           $ref: '#/components/schemas/errorResponse'
    403_Forbidden:
      description: |
        The specified resource is not available for this user. User is still
        authorize to access other endpoint. This is none of the credentials of 
        the user need to be deleted.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
        Set-Cookie:
          $ref: '#/components/headers/Set-Cookie'
          description: |
            As this is not an authorization process. This is the user 
            credential can be extended in the course of processing this request
            and will have to be returned with this response. The response body 
            will cary the corresponding sessionState object.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    404_NotFound:
      description: The specified resource was not found
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
        Set-Cookie:
          $ref: '#/components/headers/Set-Cookie'
          description: |
            As this is not an authorization process. This is the user 
            credential can be extended in the course of processing this request
            and will have to be returned with this response. The response body 
            will cary the corresponding sessionState object.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/errorResponse'

  schemas:
    AccountStatus:
      type: string
      enum:
        - ENABLED
        - DELETED
        - BLOCKED
    AccountType:
      type: string
      enum:
        - CACC
        - CASH
        - CHAR
        - CISH
        - COMM
        - CPAC
        - LLSV
        - LOAN
        - MGLD
        - MOMA
        - NREX
        - ODFT
        - ONDP
        - OTHR
        - SACC
        - SLRY
        - SVGS
        - TAXE
        - TRAN
        - TRAS
    BalanceType:
      type: string
      enum:
        - CLOSING_BOOKED
        - EXPECTED
        - AUTHORISED
        - OPENING_BOOKED
        - INTERIM_AVAILABLE
        - FORWARD_AVAILABLE
        - NONINVOICED
    PaymentProduct:
      type: string
      enum:
        - SEPA
        - INSTANT_SEPA
        - TARGET2
        - CROSS_BORDER
    PaymentStatus:
      type: string
      enum:
        - ACCC
        - ACCP
        - ACSC
        - ACSP
        - ACTC
        - ACWC
        - ACWP
        - RCVD
        - PDNG
        - RJCT
        - CANC
        - ACFC
        - PATC
    ScaStatus:
      type: string
      description: The sca status. Used to manage the consent authorization flows.
      enum:
        - received
        - psuIdentified
        - psuAuthenticated
        - scaMethodSelected
        - started
        - finalised
        - failed
        - exempted
    AccountBalanceTO:
      title: AccountBalanceTO
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/AmountTO'
        balanceType:
          $ref: '#/components/schemas/BalanceType'
        iban:
          type: string
        lastChangeDateTime:
          type: string
          format: date-time
        lastCommittedTransaction:
          type: string
        referenceDate:
          type: string
          format: date
    AccountDetailsTO:
      title: AccountDetailsTO
      type: object
      properties:
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        accountType:
          $ref: '#/components/schemas/AccountType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/AccountBalanceTO'
        bban:
          type: string
        bic:
          type: string
        currency:
          type: string
        details:
          type: string
        iban:
          type: string
        id:
          type: string
        linkedAccounts:
          type: string
        maskedPan:
          type: string
        msisdn:
          type: string
        name:
          type: string
        pan:
          type: string
        product:
          type: string
        usageType:
          type: string
          enum:
          - PRIV
          - ORGA
    AccountReferenceTO:
      title: AccountReferenceTO
      type: object
      properties:
        bban:
          type: string
        currency:
          type: string
        iban:
          type: string
        maskedPan:
          type: string
        msisdn:
          type: string
        pan:
          type: string
    AddressTO:
      title: AddressTO
      type: object
      properties:
        buildingNumber:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
        street:
          type: string
    AisAccountAccessInfo:
      title: AisAccountAccessInfo
      type: object
      properties:
        accounts:
          type: array
          description: Access to accounts
          items:
            type: string
        allPsd2:
          type: string
          description: Consent on all accounts, balances and transactions of psu
          example: ALL_ACCOUNTS
          enum:
          - ALL_ACCOUNTS
          - ALL_ACCOUNTS_WITH_BALANCES
        availableAccounts:
          type: string
          description: Consent on all available accounts of psu
          example: ALL_ACCOUNTS
          enum:
          - ALL_ACCOUNTS
          - ALL_ACCOUNTS_WITH_BALANCES
        balances:
          type: array
          description: Access to balances
          items:
            type: string
        transactions:
          type: array
          description: Access to transactions
          items:
            type: string
      description: Ais account access information
    AisConsentRequest:
      title: AisConsentRequest
      required:
      - access
      - frequencyPerDay
      - id
      - recurringIndicator
      - tppId
      - userId
      - validUntil
      type: object
      properties:
        access:
          $ref: '#/components/schemas/AisAccountAccessInfo'
        frequencyPerDay:
          type: integer
          description: Maximum frequency for an access per day. For a once-off access,
            this attribute is set to 1
          format: int32
          example: 4
        id:
          type: string
          description: The consent id
        recurringIndicator:
          type: boolean
          description: '''true'', if the consent is for recurring access to the account
            data , ''false'', if the consent is for one access to the account data'
          example: false
        tppId:
          type: string
          description: ID of the corresponding TPP.
          example: testTPP
        userId:
          type: string
          description: Corresponding PSU
        validUntil:
          type: string
          description: Consent`s expiration date. The content is the local ASPSP date
            in ISODate Format
          format: date
          example: 2020-10-10
      description: Ais consent request
    AmountTO:
      title: AmountTO
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
    ConsentAuthTO:
      title: ConsentAuthTO
      type: object
      description: Transport object for consent API request response 
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailsTO'
        authMessageTemplate:
          type: string
        authenticationMethodId:
          type: string
          description: An identification provided by the ASPSP for the later identification
            of the authentication method selection.
          example: myAuthenticationID
        bulkPayment:
          $ref: '#/components/schemas/BulkPaymentTO'
        consent:
          $ref: '#/components/schemas/AisConsentRequest'
        consentAuthState:
          type: string
          description: This is the CSRF-State String of the ConsentAuthorisationApi.
            It is a transient reference of the consent request. It encodes a key that
            is used to encrypt information stored in the corresponding ConsentAuthSessionCookie.
        periodicPayment:
          $ref: '#/components/schemas/PeriodicPaymentTO'
        psuCorporateId:
          type: string
        psuId:
          type: string
        scaMethods:
          type: array
          description: List of sca methods for selection if necessary.
          items:
            $ref: '#/components/schemas/ScaUserDataTO'
        scaStatus:
          $ref: '#/components/schemas/ScaStatus'
        singlePayment:
          $ref: '#/components/schemas/SinglePaymentTO'
    AuthorizeRequest:
      title: AuthorizeRequest
      type: object
      description: Contains information used to legitimate a request.
      properties:
        consentAuthTO:
          $ref: '#/components/schemas/ConsentAuthTO'
    AuthorizeResponse:
      title: AuthorizeResponse
      type: object
      description: Container for consent information as sent to the user agent.
      properties:
        consentAuthTO:
          $ref: '#/components/schemas/ConsentAuthTO'
    DenyRedirectRequest:
      title: DenyRedirectRequest
      type: object
      description: Denies a redirect to ASPSP requested by the ConsentAuthorisationApi
      properties:
        consentAuthTO:
          $ref: '#/components/schemas/ConsentAuthTO'
        backToFinTech:
          type: boolean
          description: Will indicate if PSU wants to be sent back to FinTechApi.
        exitPage:
          type: string
          description: In case there is no redirect back to TPP desired, exit page
            can be specified by ConsentAuthorisationApi
        forgetConsent:
          type: boolean
          description: Set to true if consent object shall be forgotten or frozen.
    PsuAuthRequest:
      title: PsuAuthRequest
      required:
      - scaAuthenticationData
      type: object
      description: Contains information used to legitimate a request.
      properties:
        consentAuthTO:
          $ref: '#/components/schemas/ConsentAuthTO'
        scaAuthenticationData:
          type: object
          additionalProperties:
            type: string
          description: SCA authentication data, depending on the chosen authentication
            method. If the data is binary, then it is base64 encoded.
    BulkPaymentTO:
      title: BulkPaymentTO
      type: object
      properties:
        batchBookingPreferred:
          type: boolean
        debtorAccount:
          $ref: '#/components/schemas/AccountReferenceTO'
        paymentId:
          type: string
        paymentProduct:
          $ref: '#/components/schemas/PaymentProduct'
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/SinglePaymentTO'
        requestedExecutionDate:
          type: string
          format: date
    PeriodicPaymentTO:
      title: PeriodicPaymentTO
      type: object
      properties:
        paymentData:
          $ref: '#/components/schemas/SinglePaymentTO'
        dayOfExecution:
          type: integer
          format: int32
        endDate:
          type: string
          format: date
        executionRule:
          type: string
        frequency:
          type: string
          enum:
          - Daily
          - Weekly
          - EveryTwoWeeks
          - Monthly
          - EveryTwoMonths
          - Quarterly
          - SemiAnnual
          - Annual
        startDate:
          type: string
          format: date
    ScaUserDataTO:
      title: ScaUserDataTO
      type: object
      properties:
        decoupled:
          type: boolean
        id:
          type: string
        methodValue:
          type: string
        scaMethod:
          type: string
          enum:
          - EMAIL
          - MOBILE
          - CHIP_OTP
          - PHOTO_OTP
          - PUSH_OTP
          - SMS_OTP
          - APP_OTP
        staticTan:
          type: string
        usesStaticTan:
          type: boolean
    SinglePaymentTO:
      title: SinglePaymentTO
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/AccountReferenceTO'
        creditorAddress:
          $ref: '#/components/schemas/AddressTO'
        creditorAgent:
          type: string
        creditorName:
          type: string
        debtorAccount:
          $ref: '#/components/schemas/AccountReferenceTO'
        endToEndIdentification:
          type: string
        instructedAmount:
          $ref: '#/components/schemas/AmountTO'
        paymentId:
          type: string
        paymentProduct:
          $ref: '#/components/schemas/PaymentProduct'
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        remittanceInformationUnstructured:
          type: string
        requestedExecutionDate:
          type: string
          format: date
        requestedExecutionTime:
          type: string
